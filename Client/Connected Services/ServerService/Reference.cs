//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Client.ServerService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServerService.ICalculator", CallbackContract=typeof(Client.ServerService.ICalculatorCallback))]
    public interface ICalculator {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ICalculator/WykonajObliczenia")]
        void WykonajObliczenia();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ICalculator/WykonajObliczenia")]
        System.Threading.Tasks.Task WykonajObliczeniaAsync();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ICalculator/Dodaj")]
        void Dodaj(double a, double b);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ICalculator/Dodaj")]
        System.Threading.Tasks.Task DodajAsync(double a, double b);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ICalculator/ustawSekret")]
        void ustawSekret(double newSecret);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ICalculator/ustawSekret")]
        System.Threading.Tasks.Task ustawSekretAsync(double newSecret);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ICalculatorCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ICalculator/UstawProcent")]
        void UstawProcent(int a);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ICalculator/UstawWynik")]
        void UstawWynik(double a);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ICalculatorChannel : Client.ServerService.ICalculator, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CalculatorClient : System.ServiceModel.DuplexClientBase<Client.ServerService.ICalculator>, Client.ServerService.ICalculator {
        
        public CalculatorClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public CalculatorClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public CalculatorClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public CalculatorClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public CalculatorClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public void WykonajObliczenia() {
            base.Channel.WykonajObliczenia();
        }
        
        public System.Threading.Tasks.Task WykonajObliczeniaAsync() {
            return base.Channel.WykonajObliczeniaAsync();
        }
        
        public void Dodaj(double a, double b) {
            base.Channel.Dodaj(a, b);
        }
        
        public System.Threading.Tasks.Task DodajAsync(double a, double b) {
            return base.Channel.DodajAsync(a, b);
        }
        
        public void ustawSekret(double newSecret) {
            base.Channel.ustawSekret(newSecret);
        }
        
        public System.Threading.Tasks.Task ustawSekretAsync(double newSecret) {
            return base.Channel.ustawSekretAsync(newSecret);
        }
    }
}
